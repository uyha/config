snippet "header"
#pragma once

namespace $1{
}
endsnippet

snippet "fd-cls" "Defind a wrapper class for Linux file descriptor"
class $1 {
public:
	$1($1 const &) = delete;
	auto operator=($1 const &) -> $1 & = delete;

	$1($1 &&other) noexcept;
	auto operator=($1 &&other) noexcept -> $1 &;

	~$1() noexcept;

private:
	$1(int fd) noexcept;

	int m_fd;
};
endsnippet

snippet "fd-fn" "Define special member functions for a wrapper object for Linux file descriptor"
$1::$1($1 &&other) noexcept
    : m_fd{other.m_fd} {
  other.m_fd = -1;
}
auto $1::operator=($1 &&other) noexcept -> $1 & {
	this->~$1();

  m_fd       = other.m_fd;
  other.m_fd = -1;

  return *this;
}

$1::~$1() noexcept {
  if (m_fd == -1) {
    return;
  }
  ::$2(m_fd);
}

$1::$1(int fd) noexcept
    : m_fd{fd} {}
endsnippet

snippet "error-category" "Define a category for an error_code"
struct $1 : std::error_category {
  auto name() const noexcept -> char const * {
    return "$2";
  }
  auto message(int error) const -> std::string {
    switch (static_cast<$3>(error)) {
    /* default: return "Unknown error"; */
    }
  }
} const $4{};

endsnippet
