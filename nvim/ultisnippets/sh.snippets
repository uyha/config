snippet sh
#!/bin/sh

set -eu
endsnippet

snippet bash
#!/usr/bin/env bash

set -euo pipefail
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
endsnippet

snippet colors
black="\e[30m"
red="\e[31m"
green="\e[32m"
brown="\e[33m"
blue="\e[34m"
purple="\e[35m"
cyan="\e[36m"
gray="\e[37m"

black_bg="\e[40m"
red_bg="\e[41m"
green_bg="\e[42m"
brown_bg="\e[43m"
blue_bg="\e[44m"
purple_bg="\e[45m"
cyan_bg="\e[46m"
gray_bg="\e[47m"

reset="\e[0m"
bold="\e[1m"
uline="\e[4m"
blinking="\e[5m"
endsnippet

snippet parse "Parse command line arguments"
positional_args=()
while [[ $# -gt 0 ]]
do
  case "\$1" in
		$1
    *)
			positional_args+=("\$1")
			shift 1
      ;;
  esac
done
endsnippet

snippet arg "Cases while parsing command line arguments"
--$1|-$2)
	$3=\$1
	shift 2
	;;
--$1=*|-$2=*)
	$3=\$(echo "\$1" | perl -pe 's/.*?=//')
	shift 1
	;;
endsnippet

snippet setup
$1_version=$2
$1_dir=$LOCAL_OPT/$1
$1_link=
$1_tmp=$(mktemp)
$1_tmp_dir=$(mktemp -d)

wget -O \$$1_tmp \$$1_link

rm -rf \$$1_tmp \$$1_tmp_dir
endsnippet

snippet lfs
#!/usr/bin/env bash

set -euo pipefail
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
LFS="$(realpath "$SCRIPT_DIR/../lfs")"
LFS_TGT="x86_64-lfs-linux-gnu"
SRC_DIR="$(realpath "$SCRIPT_DIR/../src")"
BUILD_DIR="$(realpath "$SCRIPT_DIR/../build")"
PATH="$LFS/tools/bin:$PATH"

(
mkdir -p "$SRC_DIR/${1:name}"
curl -L '${2:url}' | \
  tar \
	--extract \
	--${3:format} \
	--file - \
	--strip-components=1 \
	--directory="$SRC_DIR/$1"

mkdir -p "$BUILD_DIR/${4:build-name}"
cd "$BUILD_DIR/$4"
"$SRC_DIR/$1/configure" ${5:config-options}

make --jobs="$(nproc)"
make ${6:variables} install --jobs="$(nproc)"
)
endsnippet

snippet fn
$1(){$2}
endsnippet

snippet join
join() {
  local delimiter=\$1 first=\$2
  if shift 2; then
    printf "%s" "$first" "${@/#/$delimiter}"
  fi
}
endsnippet

snippet trans
$1=("\${$1[@]/$2/$3}")
endsnippet

snippet contain "Function for check if an array contains an value"
contain() {
	declare -n array=\$1
	declare val=\$2
	for elem in "\${array[@]}"; do
		if [[ "$elem" == "$val" ]]; then
			return 0
		fi
	done
	return 1
}
endsnippet

snippet readconfig "Read config from a key=value file"
read-config() {
	while read -r line; do
		local key="${line%%=*}"
		local value="${line#*=}"
		if contain $1 "$key"; then
			eval "declare -g \$key=\$value"
		else
			echo >&2 "Unrecognized key: \$key"
		fi
	done < $2
}
endsnippet

snippet nounused "Disable shellcheck for unused variable"
#shellcheck disable=SC2034
endsnippet

snippet testassign "If a file is readable, assign its content to a variable"
if [[ -r $1 ]]; then
	$2=$(cat $1)$0
fi
endsnippet

snippet errcho "Echo to stderr"
echo >&2 "$1"
endsnippet
