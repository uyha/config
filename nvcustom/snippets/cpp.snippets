snippet header
  #pragma once

  namespace ${1}{${0}}

snippet fd-cls 
  class ${1} {
  public:
    ${1}(${1} const &) = delete;
    auto operator=(${1} const &) -> ${1} & = delete;

    ${1}(${1} &&other) noexcept;
    auto operator=(${1} &&other) noexcept -> ${1} &;

    ~${1}() noexcept;

  private:
    ${1}(int fd) noexcept;

    int m_fd;
  };

snippet fd-fn 
  ${1}::${1}(${1} &&other) noexcept
      : m_fd{other.m_fd} {
    other.m_fd = -1;
  }
  auto ${1}::operator=(${1} &&other) noexcept -> ${1} & {
  	this->~${1}();
  
    m_fd       = other.m_fd;
    other.m_fd = -1;
  
    return *this;
  }

  ${1}::~${1}() noexcept {
    if (m_fd == -1) {
      return;
    }
    ::${2}(m_fd);
  }
  
  ${1}::${1}(int fd) noexcept
      : m_fd{fd} {}
